package org.example.informsa_bot.bot;

import org.example.informsa_bot.Config.Config;
import org.example.informsa_bot.Config.SettingsManager;
import org.example.informsa_bot.DB.ParkingDBHandler;
import org.example.informsa_bot.DB.ParkingSpot;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

public class InformSABot extends TelegramLongPollingBot {
    private final ConcurrentHashMap<String, TelegramUser> phoneToTelegramUser = new ConcurrentHashMap<>();


    private final ExcelEmployeeService employeeService = new ExcelEmployeeService();
    private final Set<Long> registeredChats = new HashSet<>();
    private final WeatherFetcher weatherFetcher;
    private final ParkingDBHandler parkingDBHandler = new ParkingDBHandler();
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫
    private final List<Long> waitingForSearchInput = new ArrayList<>();
    private final SettingsManager settingsManager = new SettingsManager();


    private final String adminChatId = "5026387260";
    private Set<Long> supportModeUsers = new HashSet<>();

    // –•—Ä–∞–Ω–∏—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–º–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private Map<Long, List<PartialSupportMessage>> supportMessages = new HashMap<>();

    private LocalDate lastWeatherSendDate = null;
    private LocalDate lastBirthdaySendDate = null;

    private final BirthdayChecker birthdayChecker = new BirthdayChecker(employeeService); // –ø–µ—Ä–µ–¥–∞–π —Å–≤–æ–π ExcelEmployeeService


    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();


    public InformSABot(SettingsManager settingsManager) {
        this.weatherFetcher = new WeatherFetcher(settingsManager);
        startWeatherBroadcastScheduler();
        startScheduledTasks();
    }


    @Override
    public String getBotUsername() {
        return "InformSA_bot"; // –≤—Å—Ç–∞–≤—å –∏–º—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7614955540:AAHKI4LZ8ZQ14mlYlwkkjuCFZ6KvlH4g_3E"; // –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    }



    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasMessage()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String username = message.getFrom().getUserName();
            String text = message.hasText() ? message.getText() : null;
            registeredChats.add(chatId);

            if (username == null || username.isEmpty()) {
                username = message.getFrom().getFirstName(); // fallback
            }

            if (update.getMessage().hasSticker()) {
                String fileId = update.getMessage().getSticker().getFileId();
                System.out.println("Sticker file_id: " + fileId);
            }




            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if (message.hasContact()) {
                Contact contact = message.getContact();
                String phone = normalizePhone(contact.getPhoneNumber());

                // –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                List<Employee> employees = employeeService.getEmployees().stream()
                        .filter(e -> normalizePhone(e.getMobilePhone()).equals(phone))
                        .collect(Collectors.toList());

                if (!employees.isEmpty()) {
                    Employee emp = employees.get(0);
                    phoneToTelegramUser.put(phone, new TelegramUser(chatId, username));
                    sendTextMessage(chatId, "–í—ñ—Ç–∞—î–º–æ, " + emp.getFullName() + " –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! ‚úÖ");
                    sendWelcomeMessage(chatId);
                } else {
                    sendAuthFailedResponse(chatId);
                }
                sendMainMenu(chatId);
                return;  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –Ω–µ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –µ—â–µ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            boolean userRegisteredByPhone = phoneToTelegramUser.values().stream()
                    .anyMatch(tu -> tu.getId().equals(chatId));

            if (!userRegisteredByPhone) {
                sendRequestContactButton(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.");
                return;  // –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            }


            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if (supportModeUsers.contains(chatId)) {
                if ("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è".equals(text)) {
                    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–¥–º–∏–Ω—É
                    sendSupportRequestToAdmin(chatId);
                    supportModeUsers.remove(chatId);
                    supportMessages.remove(chatId);

                    sendTextMessage(chatId, "–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—î–º–æ! ü•≥");
                    sendMainMenu(chatId);
                } else if (message.hasPhoto()) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                    List<PhotoSize> photos = message.getPhoto();
                    String fileId = photos.get(photos.size() - 1).getFileId(); // —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ

                    supportMessages.computeIfAbsent(chatId, k -> new ArrayList<>())
                            .add(new PartialSupportMessage(PartialSupportMessage.Type.PHOTO, fileId));

                    sendPlainTextMessage(chatId, "–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\".");
                } else if (text != null && !text.isEmpty()) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                    supportMessages.computeIfAbsent(chatId, k -> new ArrayList<>())
                            .add(new PartialSupportMessage(PartialSupportMessage.Type.TEXT, text));

                    sendPlainTextMessage(chatId, "–¢–µ–∫—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\".");
                } else {
                    sendPlainTextMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\".");
                }
                return;
            }


            registerPhone(chatId, username);

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ username –∏ chatId (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            registerUser(username, chatId);


            if (waitingForSearchInput.contains(chatId)) {
                // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                if (text != null && !text.trim().isEmpty()) {
                    waitingForSearchInput.remove(chatId);
                    handleSearchQuery(chatId, text);
                    return;
                } else {
                    // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å
                    sendTextMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü.–Ü.–ë –∞–±–æ –≤—ñ–¥–¥—ñ–ª —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É:");
                    return;
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫
                                                                                                                                     if (text != null) {
                switch (text) {
                    case "–ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ \uD83E\uDDD0":
                        waitingForSearchInput.add(chatId);
                        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
                        sendTextMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –ü.–Ü.–ë –∞–±–æ –≤—ñ–¥–¥—ñ–ª —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É:");
                        break;

                    case "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ \uD83E\uDD73":
                        sendBirthdayEmployees(chatId);
                        break;

                    case "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ \uD83E\uDD79":
                        sendWeather(chatId);
                        break;
                    case "–ü–∞—Ä–∫–æ–≤–∫–∞\uD83D\uDE97":  // –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
                        sendParkingMenu(chatId, username);
                        break;
                    case "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚öôÔ∏è":
                        supportModeUsers.add(chatId);            // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        supportMessages.put(chatId, new ArrayList<>()); // –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        sendTextMessage(chatId, "–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\"");
                        sendSendSupportButton(chatId);           // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
                        break;
                    default:
                        if ("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é".equals(text)) {
                            sendWelcomeMessage(chatId);
                            return;
                        }
                        if (text.startsWith("–ú—ñ—Å—Ü–µ ")) {
                            int spotId = parseSpotId(text);
                            if (spotId != -1) {
                                handleBookSpot(chatId, username, spotId);
                            } else {
                                sendTextMessage(chatId, "–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.");
                            }
                        } else if (text.equalsIgnoreCase("–ó–Ω—è—Ç–∏ –±—Ä–æ–Ω—é")) {
                            handleCancelBooking(chatId, username);
                        } else {
                            sendDefaultMessage(chatId);
                        }
                }
            }
        }
    }




    private void sendAuthFailedResponse(Long chatId) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ç–∏–∫–µ—Ä
        SendSticker sticker = new SendSticker();
        sticker.setChatId(chatId.toString());
        sticker.setSticker(new InputFile("CAACAgIAAxkBAAIEsmhEUakZbLtD8W9YPvf8QnUse_J7AAIXDgACKHFwSE9AJIrVMVFBNgQ"));

        // –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        String userProfileLink = "<a href=\"tg://user?id=" + adminChatId + "\">üë§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</a>";
        String text= ("–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. " +
                "\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ: " +userProfileLink);
        message.setText(text);
        message.setParseMode("HTML"); // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML

        try {
            execute(sticker); // —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∏–∫–µ—Ä
            execute(message); // –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendSendSupportButton(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:");

        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"));

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(Collections.singletonList(row));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendSupportRequestToAdmin(Long fromChatId) {
        List<PartialSupportMessage> msgs = supportMessages.get(fromChatId);
        if (msgs == null || msgs.isEmpty()) {
            sendTextMessage(fromChatId, "–í–∏ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
            return;
        }

        String userInfo = "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <a href=\"tg://user?id=" + fromChatId + "\">üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</a>\n";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        SendMessage infoMsg = new SendMessage();
        infoMsg.setChatId(adminChatId);
        infoMsg.setText(userInfo);
        infoMsg.setParseMode("HTML");  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML

        try {
            execute(infoMsg);

            for (PartialSupportMessage m : msgs) {
                if (m.type == PartialSupportMessage.Type.TEXT) {
                    SendMessage sm = new SendMessage();
                    sm.setChatId(adminChatId);
                    sm.setText("üìù " + m.content);
                    sm.setParseMode("HTML");  // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    execute(sm);
                } else if (m.type == PartialSupportMessage.Type.PHOTO) {
                    SendPhoto sp = new SendPhoto();
                    sp.setChatId(adminChatId);
                    sp.setPhoto(new InputFile(m.content));
                    execute(sp);
                }
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendPlainTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        // –ó–¥–µ—Å—å –Ω–µ —Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –º–µ–Ω—é
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(getMainMenuKeyboard()); // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMainMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:");
        message.setReplyMarkup(getMainMenuKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void registerUser(String username, Long chatId) {
        if (username == null || username.isEmpty()) return;

        List<Employee> employees = findEmployeesByTelegramUsername(username);
        if (employees.isEmpty()) {
            System.out.println("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å Telegram username: @" + username);
            return;
        }

        Employee employee = employees.get(0);
        String phone = normalizePhone(employee.getMobilePhone());
        if (phone == null || phone.isEmpty()) {
            System.out.println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + employee.getMobilePhone());
            return;
        }

        TelegramUser telegramUser = new TelegramUser(chatId, username);
        phoneToTelegramUser.put(phone, telegramUser);

        System.out.println("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username +
                ", fullName: " + employee.getFullName() +
                ", –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone +
                ", chatId: " + chatId);
    }

    private void registerPhone(Long chatId, String phoneNumber) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–∏—Ä–µ, —Å–∫–æ–±–∫–∏)
        String normalizedPhone = normalizePhone(phoneNumber);

        if (normalizedPhone == null || normalizedPhone.isEmpty()) return;

        // –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        List<Employee> employees = employeeService.getEmployees().stream()
                .filter(e -> {
                    String empPhoneNorm = normalizePhone(e.getMobilePhone());
                    return empPhoneNorm != null && empPhoneNorm.equals(normalizedPhone);
                })
                .collect(Collectors.toList());

        if (employees.isEmpty()) {
            System.out.println("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: " + normalizedPhone);
            return;
        }

        Employee emp = employees.get(0);

        // –°–≤—è–∑—ã–≤–∞–µ–º chatId –∏ username —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        String username = emp.getTelegramPhone();
        if (username == null) username = ""; // –∏–ª–∏ –º–æ–∂–Ω–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

        TelegramUser tgUser = new TelegramUser(chatId, username);
        phoneToTelegramUser.put(normalizedPhone, tgUser);

        System.out.println("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + emp.getFullName() + " —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º " + normalizedPhone);
    }


    public List<Employee> findEmployeesByTelegramUsername(String username) {
        if (username == null) return Collections.emptyList();

        List<Employee> employees = employeeService.getEmployees(); // –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

        return employees.stream()
                .filter(e -> {
                    if (e.getTelegramPhone() == null) return false;
                    String tgUsername = e.getTelegramPhone().replace("@", "").toLowerCase();
                    return tgUsername.equalsIgnoreCase(username.toLowerCase());
                })
                .collect(Collectors.toList());
    }

    private void sendWelcomeMessage(long chatId) {
        String welcome = "–í—ñ—Ç–∞—é!\uD83D\uDC4B –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ INFORM\uD83D\uDCAA, \n —è –ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó Sante-Alko,—á–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?" +
                "\n –Ø –≤–º—ñ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –Ω–∞—à–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤, –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ –Ω–∞ –ø–∞—Ä–∫–æ–≤—Ü—ñ —Ç–∞ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≥–æ–¥—É." +
                "\n –ê —â–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ –º–æ–∂–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—Ä–æ–±–ª–µ–º—É";
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(welcome);
        message.setReplyMarkup(getMainMenuKeyboard());
        executeMessage(message);
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
    private void sendRequestContactButton(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        KeyboardButton button = new KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É");
        button.setRequestContact(true);

        KeyboardRow row = new KeyboardRow();
        row.add(button);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(Collections.singletonList(row));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup getMainMenuKeyboard() {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setSelective(true);
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();

        KeyboardButton btnSearch = new KeyboardButton("–ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ \uD83E\uDDD0");
        KeyboardButton btnBirthday = new KeyboardButton("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ \uD83E\uDD73");
        KeyboardButton btnWeather = new KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ \uD83E\uDD79");
        KeyboardButton btnParking = new KeyboardButton("–ü–∞—Ä–∫–æ–≤–∫–∞\uD83D\uDE97");  // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        KeyboardButton btnSupport = new KeyboardButton("–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚öôÔ∏è");

        row.add(btnSearch);
        row.add(btnBirthday);
        row.add(btnWeather);
        row.add(btnParking);
        row.add(btnSupport);

        keyboard.add(row);
        markup.setKeyboard(keyboard);

        return markup;
    }



    private void startWeatherBroadcastScheduler() {
        scheduler.scheduleAtFixedRate(() -> {
            try {
                checkAndSendWeatherBroadcast();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }, 0, 1, TimeUnit.MINUTES);
    }

    private void checkAndSendWeatherBroadcast() {
        LocalTime now = LocalTime.now().withSecond(0).withNano(0);
        LocalTime targetTime = settingsManager.getWeatherTime();
        LocalDate today = LocalDate.now();

        if (lastWeatherSendDate != null && lastWeatherSendDate.equals(today)) {
            return; // –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        }

        if (now.equals(targetTime)) {
            String weatherReport = weatherFetcher.getDetailedWeather();
            broadcastMessage(weatherReport);
            lastWeatherSendDate = today;
        }
    }


    public void startScheduledTasks() {
        Runnable task = () -> {
            LocalTime now = LocalTime.now().withSecond(0).withNano(0);
            LocalDate today = LocalDate.now();

            // –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            LocalTime weatherTime = settingsManager.getWeatherTime();
            if (now.equals(weatherTime) && (lastWeatherSendDate == null || !lastWeatherSendDate.equals(today))) {
                String weather = weatherFetcher.getDetailedWeather();
                broadcastMessage(weather);
                lastWeatherSendDate = today;
            }



            // –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            LocalTime birthdayTime = settingsManager.getBirthdayTime();
            if (now.equals(birthdayTime) && (lastBirthdaySendDate == null || !lastBirthdaySendDate.equals(today))) {
                List<Employee> birthdayEmployees = birthdayChecker.getTodayBirthdayEmployees();
                if (!birthdayEmployees.isEmpty()) {
                    StringBuilder msg = new StringBuilder("üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É:\n");

                    for (Employee e : birthdayEmployees) {
                        String phoneNorm = normalizePhone(e.getMobilePhone());
                        TelegramUser tgUser = phoneToTelegramUser.get(phoneNorm);

                        String escapedName = escapeHtml(e.getFullName());

                        if (tgUser != null && tgUser.getUsername() != null && !tgUser.getUsername().isEmpty()) {
                            String username = tgUser.getUsername().replace("@", "");
                            msg.append("‚Ä¢ <a href=\"https://t.me/").append(username).append("\">")
                                    .append(escapedName).append("</a>\n");
                        } else {
                            msg.append("‚Ä¢ ").append(escapedName).append("\n");
                        }
                    }

                    msg.append("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏! ü•≥");

                    broadcastMessageHtml(msg.toString());
                    lastBirthdaySendDate = today;

                }
            }

        };


        scheduler.scheduleAtFixedRate(task, 0, 1, TimeUnit.MINUTES);
    }

    private String escapeMarkdown(String text) {
        if (text == null) return "";
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ _ * [ ] `
        return text.replaceAll("([_\\*\\[\\]`])", "\\\\$1");
    }
    public void broadcastMessage(String text) {
        String escapedText = escapeMarkdown(text);
        for (Long chatId : registeredChats) {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(escapedText);
            message.setParseMode("Markdown");
            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    public void broadcastMessageHtml(String text) {
        for (Long chatId : registeredChats) {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(text);
            message.setParseMode("HTML");
            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }


    private void sendTextMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(escapeMarkdown(text));  // –ó–¥–µ—Å—å —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        message.setParseMode("Markdown");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendLongMessage(long chatId, String text) {
        final int MAX_LENGTH = 4000; // —á—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ Telegram

        if (text.length() <= MAX_LENGTH) {
            sendTextMessage(chatId, text);
        } else {
            int start = 0;
            while (start < text.length()) {
                int end = Math.min(start + MAX_LENGTH, text.length());
                // –ß—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π \n –¥–æ end
                int lastNewLine = text.lastIndexOf('\n', end);
                if (lastNewLine <= start) {
                    lastNewLine = end;
                }
                String part = text.substring(start, lastNewLine);
                sendTextMessage(chatId, part);
                start = lastNewLine;
            }
        }
    }


    private void executeMessage(SendMessage message) {
        if (message.getParseMode() != null && message.getParseMode().equals("Markdown")) {
            String escapedText = escapeMarkdown(message.getText());
            message.setText(escapedText);
        }
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void handleSearchQuery(long chatId, String query) {
        List<Employee> found = employeeService.findEmployeesByNameOrDepartment(query);
        System.out.println("handleSearchQuery called with query: '" + query + "'");
        if (found.isEmpty()) {
            SendSticker sticker = new SendSticker();
            sticker.setChatId(String.valueOf(chatId));
            sticker.setSticker(new InputFile("CAACAgIAAxkBAAIE3mhEVeBFDtsrIOAgvO_sDHiTcJ3EAAKfSwACsYN5SLedtoC1Y9s1NgQ"));

            try {
                execute(sticker);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sendTextMessage(chatId, "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º ü§í: " + query);
        } else {
            StringBuilder sb = new StringBuilder("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n");
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
            for (Employee e : found) {
                sb.append("–Ü–º`—è: ").append(e.getFullName()).append("\n")
                        .append("–í—ñ–¥–¥—ñ–ª: ").append(e.getDepartment()).append("\n")
                        .append("–ü–æ—Å–∞–¥–∞:: ").append(e.getPost()).append("\n")
                        .append("–¢–µ–ª–µ—Ñ–æ–Ω: ").append(e.getMobilePhone()).append("\n")
                        .append("–ü–æ—à—Ç–∞: ").append(e.getMail()).append("\n")
                        .append("–¢–µ–ª–µ–≥—Ä–∞–º: ").append(e.getTelegramPhone()).append("\n")
                        .append("–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ").append(e.getBirthDate().format(dateFormatter)).append("\n")
                        .append("--------------------------------------------------\n");
            }
            sendLongMessage(chatId, sb.toString());
        }
    }
    private void sendTextMessage(long chatId, String text, ReplyKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboard);
        message.setParseMode("Markdown"); // <--- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        executeMessage(message);
    }

    private void sendBirthdayEmployees(long chatId) {
        List<Employee> birthdayEmployees = employeeService.getTodayBirthdayEmployees();
        if (birthdayEmployees.isEmpty()) {
            sendTextMessageHtml(chatId, "–°—å–æ–≥–æ–¥–Ω—ñ –Ω—ñ—Ö—Ç–æ –∑ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–µ —Å–≤—è—Ç–∫—É—î –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. üòû");
        } else {
            StringBuilder sb = new StringBuilder("üéâ –°—å–æ–≥–æ–¥–Ω—ñ —Å–≤—è—Ç–∫—É—é—Ç—å –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n");
            for (Employee e : birthdayEmployees) {
                String phoneNorm = normalizePhone(e.getMobilePhone());
                TelegramUser tgUser = phoneToTelegramUser.get(phoneNorm);

                System.out.println("üéà –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: " + e.getFullName() + ", —Ç–µ–ª–µ—Ñ–æ–Ω: " + e.getMobilePhone() +
                        ", –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∏–π: " + phoneNorm +
                        ", –∑–Ω–∞–π–¥–µ–Ω–∏–π TelegramUser: " + (tgUser != null ? tgUser.getUsername() : "–Ω–µ–º–∞—î"));

                String escapedName = escapeHtml(e.getFullName());
                String escapedDeptWithBrackets = escapeHtml(" (" + e.getDepartment() + ")");
                String escapedPhone = escapeHtml(e.getMobilePhone());

                if (tgUser != null && tgUser.getUsername() != null && !tgUser.getUsername().isEmpty()) {
                    String username = tgUser.getUsername().replace("@", "");
                    sb.append("‚Ä¢ <a href=\"https://t.me/").append(username).append("\">").append(escapedName).append("</a>");
                } else {
                    sb.append("‚Ä¢ ").append(escapedName);
                }

                sb.append(escapedDeptWithBrackets)
                        .append("\n–¢–µ–ª: ").append(escapedPhone)
                        .append("\n\n");
            }
            sendTextMessageHtml(chatId, sb.toString());
        }
    }

    private String escapeHtml(String text) {
        if (text == null) return "";
        return text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;")
                .replace("'", "&#39;");
    }

    private void sendTextMessageHtml(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setParseMode("HTML");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }



    private String normalizePhone(String phone) {
        if (phone == null) return null;

        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        String digits = phone.replaceAll("\\D+", "");

        // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 380 ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
        if (digits.startsWith("380")) {
            return digits;
        }

        // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º 38 —Å–ø–µ—Ä–µ–¥–∏
        if (digits.startsWith("0")) {
            return "38" + digits;
        }

        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º —á—Ç–æ –µ—Å—Ç—å
        return digits;
    }
    private void sendWeather(long chatId) {
        String weatherText = weatherFetcher.getDetailedWeather();
        sendTextMessage(chatId, weatherText);
    }

    private void sendDefaultMessage(long chatId) {
        sendTextMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥, –±—É–¥—å –ª–∞—Å–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.");
    }

    private void sendParkingMenu(long chatId, String username) {
        List<ParkingSpot> spots = parkingDBHandler.getAllSpots();

        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç: " + spots.size());
        for (ParkingSpot spot : spots) {
            System.out.println("–ú—ñ—Å—Ü–µ " + spot.getSpotId() + ", –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ: " + spot.isBooked() + ", —é–∑–µ—Ä: " + spot.getBookedByUsername());
        }

        StringBuilder bookedSpotsInfo = new StringBuilder("‚ùå –ó–∞–Ω—è—Ç—ñ –º—ñ—Å—Ü—è:\n");
        boolean hasBookedSpots = false;

        List<KeyboardRow> freeSpotRows = new ArrayList<>();
        KeyboardRow currentRow = new KeyboardRow();

        for (ParkingSpot spot : spots) {
            if (spot.isBooked()) {
                hasBookedSpots = true;
                bookedSpotsInfo.append("–ú—ñ—Å—Ü–µ ")
                        .append(spot.getSpotId())
                        .append(" ‚Äî ")
                        .append("@").append(spot.getBookedByUsername() == null ? "–ù–µ–≤—ñ–¥–æ–º–æ" : spot.getBookedByUsername().replace("@", ""));

                if (spot.getBookedByPhone() != null && !spot.getBookedByPhone().isEmpty()) {
                    bookedSpotsInfo.append(" (").append(spot.getBookedByPhone()).append(")");
                }
                bookedSpotsInfo.append("\n");
                if (spot.getBookedByPhone() != null && !spot.getBookedByPhone().isEmpty()) {
                    bookedSpotsInfo.append(" (").append(spot.getBookedByPhone()).append(")");
                }
                bookedSpotsInfo.append("\n");
            } else {
                currentRow.add("–ú—ñ—Å—Ü–µ " + spot.getSpotId());
                if (currentRow.size() == 5) {
                    freeSpotRows.add(currentRow);
                    currentRow = new KeyboardRow();
                }
            }
        }
        if (!currentRow.isEmpty()) freeSpotRows.add(currentRow);

        // üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—Ä–æ–Ω—å
        ParkingSpot userBooking = parkingDBHandler.getBookingByUser(username);
        if (userBooking != null) {
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add("–ó–Ω—è—Ç–∏ –±—Ä–æ–Ω—é");
            freeSpotRows.add(cancelRow);
        }

        KeyboardRow backRow = new KeyboardRow();
        backRow.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
        freeSpotRows.add(backRow);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setKeyboard(freeSpotRows);
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        String messageText = "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:";
        if (hasBookedSpots) {
            messageText += "\n\n" + bookedSpotsInfo.toString();
        }

        System.out.println("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + messageText);

        sendTextMessage(chatId, messageText, keyboard);
    }

    private int parseSpotId(String text) {
        try {
            String[] parts = text.split(" ");
            return Integer.parseInt(parts[1]);
        } catch (Exception e) {
            return -1;
        }
    }

    private void handleBookSpot(long chatId, String username, int spotId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—Ä–æ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—Ä–æ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var userBooking = parkingDBHandler.getBookingByUser(username);
        if (userBooking != null) {
            // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∏–∫–µ—Ä
            SendSticker sticker = new SendSticker();
            sticker.setChatId(String.valueOf(chatId));
            sticker.setSticker(new InputFile("CAACAgIAAxkBAAIE2mhEVShJTJY5eDajY4FwQo85Sb8PAALzQgACMnN4SPsuRE6dqD_LNgQ"));

            try {
                execute(sticker);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            // –ó–∞—Ç–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendTextMessage(chatId, "–£ –≤–∞—Å –≤–∂–µ —î –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ –º—ñ—Å—Ü–µ: " + userBooking.getSpotId() + ". –ó–Ω—ñ–º—ñ—Ç—å –±—Ä–æ–Ω—å –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º –≤–∏–±–æ—Ä–æ–º.");
            return; // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        }


        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
        boolean success = parkingDBHandler.bookSpot(spotId, username, "");

        if (success) {
            // üîß –î–æ–±–∞–≤–ª—è–µ–º 2 –∫–Ω–æ–ø–∫–∏: –ó–Ω—è—Ç–∏ –±—Ä–æ–Ω—é –∏ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
            KeyboardRow row1 = new KeyboardRow();
            row1.add("–ó–Ω—è—Ç–∏ –±—Ä–æ–Ω—é");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");

            keyboard.setKeyboard(List.of(row1, row2));
            keyboard.setResizeKeyboard(true);
            keyboard.setOneTimeKeyboard(true);

            sendTextMessage(chatId, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –º—ñ—Å—Ü–µ ‚Ññ" + spotId, keyboard);
        } else {
            sendTextMessage(chatId, "–ú—ñ—Å—Ü–µ ‚Ññ" + spotId + " –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ.");
        }
    }

    private void handleCancelBooking(long chatId, String username) {
        boolean canceled = parkingDBHandler.cancelBookingByUser(username);
        if (canceled) {
            sendTextMessage(chatId, "–í–∞—à–∞ –±—Ä–æ–Ω—å –∑–Ω—è—Ç–∞.");
            sendParkingMenu(chatId, username);
        } else {

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                SendSticker sticker = new SendSticker();
                sticker.setChatId(String.valueOf(chatId));
                sticker.setSticker(new InputFile("CAACAgIAAxkBAAIE3mhEVeBFDtsrIOAgvO_sDHiTcJ3EAAKfSwACsYN5SLedtoC1Y9s1NgQ"));

                try {
                    execute(sticker);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }

                // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sendTextMessage(chatId, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –±—Ä–æ–Ω—ñ.");

        }
    }
    private static class PartialSupportMessage {
        enum Type { TEXT, PHOTO }
        Type type;
        String content; // —Ç–µ–∫—Å—Ç –∏–ª–∏ file_id –¥–ª—è —Ñ–æ—Ç–æ

        PartialSupportMessage(Type type, String content) {
            this.type = type;
            this.content = content;
        }
    }
}

